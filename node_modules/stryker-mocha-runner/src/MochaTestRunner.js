"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var log4js = require("log4js");
var events_1 = require("events");
var test_runner_1 = require("stryker-api/test_runner");
var Mocha = require("mocha");
var StrykerMochaReporter_1 = require("./StrykerMochaReporter");
var log = log4js.getLogger('MochaTestRunner');
var MochaTestRunner = (function (_super) {
    tslib_1.__extends(MochaTestRunner, _super);
    function MochaTestRunner(runnerOptions) {
        var _this = _super.call(this) || this;
        _this.files = runnerOptions.files;
        return _this;
    }
    MochaTestRunner.prototype.purgeFiles = function () {
        this.files.forEach(function (f) { return delete require.cache[f.path]; });
    };
    MochaTestRunner.prototype.run = function () {
        var _this = this;
        return new Promise(function (resolve, fail) {
            try {
                _this.purgeFiles();
                var mocha_1 = new Mocha({ reporter: StrykerMochaReporter_1.default, bail: true });
                _this.files.filter(function (file) { return file.included; }).forEach(function (f) { return mocha_1.addFile(f.path); });
                try {
                    mocha_1.run(function (failures) {
                        var reporter = StrykerMochaReporter_1.default.CurrentInstance;
                        if (reporter) {
                            var result = reporter.runResult;
                            resolve(result);
                        }
                        else {
                            var errorMsg = 'The StrykerMochaReporter was not instantiated properly. Could not retrieve the RunResult.';
                            log.error(errorMsg);
                            resolve({
                                tests: [],
                                errorMessages: [errorMsg],
                                status: test_runner_1.RunStatus.Error
                            });
                        }
                    });
                }
                catch (error) {
                    resolve({
                        status: test_runner_1.RunStatus.Error,
                        tests: [],
                        errorMessages: [error]
                    });
                }
            }
            catch (error) {
                log.error(error);
                fail(error);
            }
        });
    };
    return MochaTestRunner;
}(events_1.EventEmitter));
exports.default = MochaTestRunner;
//# sourceMappingURL=MochaTestRunner.js.map