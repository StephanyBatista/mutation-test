"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("stryker-api/config");
var log4js = require("log4js");
var _ = require("lodash");
var VALID_COVERAGE_ANALYSIS_VALUES = ['perTest', 'all', 'off'];
exports.CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\n' +
    '    config.set({\n' +
    '      // your config\n' +
    '    });\n' +
    '  };';
var log = log4js.getLogger('ConfigReader');
var ConfigReader = /** @class */ (function () {
    function ConfigReader(cliOptions) {
        this.cliOptions = cliOptions;
    }
    ConfigReader.prototype.readConfig = function () {
        var configModule = this.loadConfigModule();
        var config = new config_1.Config();
        try {
            configModule(config);
        }
        catch (e) {
            log.fatal('Error in config file!\n', e);
            process.exit(1);
        }
        // merge the config from config file and cliOptions (precedence)
        config.set(this.cliOptions);
        this.validate(config);
        return config;
    };
    ConfigReader.prototype.loadConfigModule = function () {
        // we start with a dummy configModule
        var configModule = function () { };
        if (this.cliOptions.configFile) {
            log.debug('Loading config %s', this.cliOptions.configFile);
            try {
                configModule = require(process.cwd() + "/" + this.cliOptions.configFile);
            }
            catch (e) {
                if (e.code === 'MODULE_NOT_FOUND' && e.message.indexOf(this.cliOptions.configFile) !== -1) {
                    log.fatal("File " + process.cwd() + "/" + this.cliOptions.configFile + " does not exist!");
                    log.fatal(e);
                }
                else {
                    log.fatal('Invalid config file!\n  ' + e.stack);
                }
                log.info('Stryker can help you setup a `stryker.conf` file for your project.');
                log.info('Please execute `stryker init` in your project\'s root directory.');
                process.exit(1);
            }
            if (!_.isFunction(configModule)) {
                log.fatal('Config file must export a function!\n' + exports.CONFIG_SYNTAX_HELP);
                process.exit(1);
            }
        }
        else if (Object.keys(this.cliOptions).length === 0) {
            log.info('Using stryker.conf.js in the current working directory.');
            this.cliOptions.configFile = 'stryker.conf.js';
            return this.loadConfigModule();
        }
        else {
            log.info('No config file specified. Running with command line arguments');
            // if no config file path is passed, we create and return a dummy config module.
        }
        return configModule;
    };
    ConfigReader.prototype.validate = function (options) {
        if (VALID_COVERAGE_ANALYSIS_VALUES.indexOf(options.coverageAnalysis) < 0) {
            log.fatal("Value \"" + options.coverageAnalysis + "\" is invalid for `coverageAnalysis`. Expected one of the folowing: " + VALID_COVERAGE_ANALYSIS_VALUES.map(function (v) { return "\"" + v + "\""; }).join(', '));
            process.exit(1);
        }
        if (options.coverageAnalysis === 'perTest' && !options.testFramework) {
            var validCoverageAnalysisSettingsExceptPerTest = VALID_COVERAGE_ANALYSIS_VALUES.filter(function (v) { return v !== 'perTest'; }).map(function (v) { return "\"" + v + "\""; }).join(', ');
            log.fatal("Configured coverage analysis 'perTest' requires a test framework to be configured. Either configure your test framework (for example testFramework: 'jasmine') or set coverageAnalysis setting to one of the following: " + validCoverageAnalysisSettingsExceptPerTest);
            process.exit(1);
        }
    };
    return ConfigReader;
}());
exports.default = ConfigReader;
//# sourceMappingURL=ConfigReader.js.map