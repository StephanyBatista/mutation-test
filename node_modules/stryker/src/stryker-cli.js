"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var ConfigReader_1 = require("./ConfigReader");
var Stryker_1 = require("./Stryker");
var StrykerInitializer_1 = require("./initializer/StrykerInitializer");
var log4js = require("log4js");
var log = log4js.getLogger('stryker-cli');
var command = '', strykerConfig = null;
function list(val) {
    return val.split(',');
}
program
    .version(require('../package.json').version)
    .usage('<command> [options] [stryker.conf.js]')
    .description("Possible commands: \n    run: Run mutation testing\n    init: Initalize Stryker for your project\n\nOptional location to the stryker.conf.js file as last argument. That file should export a function which accepts a \"config\" object\n" + ConfigReader_1.CONFIG_SYNTAX_HELP)
    .arguments('<command> [stryker.conf.js]')
    .action(function (cmd, config) {
    command = cmd;
    strykerConfig = config;
})
    .option('-f, --files <allFiles>', "A comma seperated list of globbing expression used for selecting all files needed to run the tests. For a more detailed way of selecting inputfiles, please use a configFile.\n  Example: node_modules/a-lib/**/*.js,src/**/*.js,!src/index.js,a.js,test/**/*.js", list)
    .option('-m, --mutate <filesToMutate>', "A comma seperated list of globbing expression used for selecting the files that should be mutated.\n  Example: src/**/*.js,a.js", list)
    .option('--coverageAnalysis <perTest|all|off>', "The coverage analysis strategy you want to use. Default value: \"perTest\"")
    .option('--testFramework <name>', "The name of the test framework you want to use.")
    .option('--testRunner <name>', "The name of the test runner you want to use")
    .option('--reporter <name>', 'A comma separated list of the names of the reporter(s) you want to use', list)
    .option('--plugins <listOfPlugins>', 'A list of plugins you want stryker to load (`require`).', list)
    .option('--port <n>', 'A free port for the test runner to use (if it needs to). Any additional test runners will be spawned using n+1, n+2, etc', parseInt)
    .option('--timeoutMs <number>', 'Tweak the absolute timeout used to wait for a test runner to complete', parseInt)
    .option('--timeoutFactor <number>', 'Tweak the standard deviation relative to the normal test run of a mutated test', parseFloat)
    .option('--maxConcurrentTestRunners <n>', 'Set the number of max concurrent test runner to spawn (default: cpuCount)', parseInt)
    .option('--logLevel <level>', 'Set the log4js loglevel. Possible values: fatal, error, warn, info, debug, trace, all and off. Default is "info"')
    .parse(process.argv);
log4js.setGlobalLogLevel(program['logLevel'] || 'info');
// Cleanup commander state
delete program['options'];
delete program['rawArgs'];
delete program.args;
delete program.Command;
delete program.Option;
delete program['commands'];
for (var i in program) {
    if (i.charAt(0) === '_') {
        delete program[i];
    }
}
if (strykerConfig) {
    program['configFile'] = strykerConfig;
}
if (program['logLevel']) {
    log4js.setGlobalLogLevel(program['logLevel']);
}
var commands = {
    init: function () { return new StrykerInitializer_1.default().initialize(); },
    run: function () { return new Stryker_1.default(program).runMutationTest(); }
};
if (Object.keys(commands).indexOf(command) >= 0) {
    commands[command]().catch(function (err) {
        log.error("an error occurred", err);
        process.exitCode = 1;
        process.kill(process.pid, 'SIGINT');
    });
}
else {
    log.error('Unknown command: "%s", supported commands: [%s], or use `stryker --help`.', command, Object.keys(commands));
}
//# sourceMappingURL=stryker-cli.js.map