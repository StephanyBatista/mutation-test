"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var stream_1 = require("stream");
var istanbul_1 = require("istanbul");
var log4js = require("log4js");
var coverageObjRegex = /\{.*"path".*"fnMap".*"statementMap".*"branchMap".*\}/g;
var log = log4js.getLogger('CoverageInstrumenterStream');
/**
 * Represents a stream responsible to add code coverage instrumentation and reporting back on the statement map
 */
var CoverageInstrumenterStream = /** @class */ (function (_super) {
    tslib_1.__extends(CoverageInstrumenterStream, _super);
    function CoverageInstrumenterStream(coverageVariable, filename, opts) {
        var _this = _super.call(this, opts) || this;
        _this.coverageVariable = coverageVariable;
        _this.filename = filename;
        _this.source = '';
        return _this;
    }
    CoverageInstrumenterStream.prototype._transform = function (chunk, encoding, callback) {
        if (typeof chunk === 'string') {
            this.source += chunk;
        }
        else {
            this.source += chunk.toString();
        }
        callback();
    };
    CoverageInstrumenterStream.prototype._flush = function (callback) {
        try {
            var instrumenter = new istanbul_1.Instrumenter({ coverageVariable: this.coverageVariable });
            var instrumentedCode = instrumenter.instrumentSync(this.source, this.filename);
            coverageObjRegex.lastIndex = 0;
            var coverageObjectMatch = coverageObjRegex.exec(instrumentedCode) + '';
            var coverageObj = JSON.parse(coverageObjectMatch);
            this.statementMap = coverageObj.statementMap;
            this.push(instrumentedCode);
        }
        catch (err) {
            var error = "Error while instrumenting file \"" + this.filename + "\", error was: " + err.toString();
            log.error(error);
            this.push(this.source);
        }
        callback();
    };
    return CoverageInstrumenterStream;
}(stream_1.Transform));
exports.default = CoverageInstrumenterStream;
//# sourceMappingURL=CoverageInstrumenterStream.js.map