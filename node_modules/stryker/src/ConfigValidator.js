"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js_1 = require("log4js");
var ConfigValidator = /** @class */ (function () {
    function ConfigValidator(strykerConfig, testFramework) {
        this.strykerConfig = strykerConfig;
        this.testFramework = testFramework;
        this.isValid = true;
    }
    ConfigValidator.prototype.validate = function () {
        this.validateTestFramework();
        this.validateThresholds();
        this.crashIfNeeded();
    };
    ConfigValidator.prototype.validateTestFramework = function () {
        if (this.strykerConfig.coverageAnalysis === 'perTest' && !this.testFramework) {
            this.invalidate('Configured coverage analysis "perTest" requires there to be a testFramework configured. Either configure a testFramework or set coverageAnalysis to "all" or "off".');
        }
    };
    ConfigValidator.prototype.validateThresholds = function () {
        var thresholds = this.strykerConfig.thresholds;
        this.validateThresholdsValueExists('high', thresholds.high);
        this.validateThresholdsValueExists('low', thresholds.low);
        this.validateThresholdValue('high', thresholds.high);
        this.validateThresholdValue('low', thresholds.low);
        this.validateThresholdValue('break', thresholds.break);
        if (thresholds.high < thresholds.low) {
            this.invalidate("`thresholds.high` is lower than `thresholds.low` (" + thresholds.high + " < " + thresholds.low + ")");
        }
    };
    ConfigValidator.prototype.validateThresholdValue = function (name, value) {
        if (typeof value === 'number' && (value < 0 || value > 100)) {
            this.invalidate("thresholds." + name + " should be between 0 and 100 (was " + value + ")");
        }
    };
    ConfigValidator.prototype.validateThresholdsValueExists = function (name, value) {
        if (typeof value !== 'number') {
            this.invalidate("thresholds." + name + " is invalid, expected a number between 0 and 100 (was " + value + ").");
        }
    };
    ConfigValidator.prototype.crashIfNeeded = function () {
        if (!this.isValid) {
            process.exit(1);
        }
    };
    ConfigValidator.prototype.invalidate = function (message) {
        log.fatal(message);
        this.isValid = false;
    };
    return ConfigValidator;
}());
exports.default = ConfigValidator;
var log = log4js_1.getLogger(ConfigValidator.name);
//# sourceMappingURL=ConfigValidator.js.map