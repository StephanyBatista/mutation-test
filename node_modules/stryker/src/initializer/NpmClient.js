"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RestClient_1 = require("typed-rest-client/RestClient");
var log4js = require("log4js");
var objectUtils_1 = require("../utils/objectUtils");
var log = log4js.getLogger('NpmClient');
var BASE_NPM_SEARCH = 'https://api.npms.io';
var BASE_NPM_PACKAGE = 'https://registry.npmjs.org';
var getName = function (packageName) {
    return packageName.split('-')[1];
};
var mapSearchResultToPromptOption = function (searchResults) { return searchResults.results.map(function (result) { return ({
    name: getName(result.package.name),
    npm: result.package.name
}); }); };
var handleResult = function (from) { return function (response) {
    if (response.statusCode === 200) {
        return response.result;
    }
    else {
        throw new Error("Query " + from + " resulted in http status code: " + response.statusCode + ".");
    }
}; };
var NpmClient = /** @class */ (function () {
    function NpmClient(searchClient, packageClient) {
        if (searchClient === void 0) { searchClient = new RestClient_1.RestClient('npmSearch', BASE_NPM_SEARCH); }
        if (packageClient === void 0) { packageClient = new RestClient_1.RestClient('npm', BASE_NPM_PACKAGE); }
        this.searchClient = searchClient;
        this.packageClient = packageClient;
    }
    NpmClient.prototype.getTestRunnerOptions = function () {
        return this.search('/v2/search?q=keywords:stryker-test-runner')
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getTestFrameworkOptions = function (testRunnerFilter) {
        return this.search('/v2/search?q=keywords:stryker-test-framework')
            .then(function (searchResult) {
            if (testRunnerFilter) {
                searchResult.results = searchResult.results.filter(function (framework) { return framework.package.keywords.indexOf(testRunnerFilter) >= 0; });
            }
            return searchResult;
        })
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getTestReporterOptions = function () {
        return this.search("/v2/search?q=keywords:stryker-reporter")
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getAdditionalConfig = function (packageName) {
        return this.packageClient.get("/" + packageName + "/latest")
            .then(handleResult(BASE_NPM_PACKAGE + "/" + packageName))
            .then(function (pkg) { return pkg.initStrykerConfig || {}; })
            .catch(function (err) {
            log.warn("Could not fetch additional initialization config for dependency " + packageName + ". You might need to configure it manually", err);
            return {};
        });
    };
    NpmClient.prototype.search = function (query) {
        var call = BASE_NPM_SEARCH + query;
        log.debug("Searching: " + call);
        return this.searchClient.get(query)
            .then(handleResult(call))
            .catch(function (err) {
            log.error("Unable to reach " + BASE_NPM_SEARCH + " (for query " + query + "). Please check your internet connection.", objectUtils_1.errorToString(err));
            var result = {
                total: 0,
                results: []
            };
            return result;
        });
    };
    return NpmClient;
}());
exports.default = NpmClient;
//# sourceMappingURL=NpmClient.js.map