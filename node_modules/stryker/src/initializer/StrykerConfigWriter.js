"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("mz/fs");
var _ = require("lodash");
var log4js_1 = require("log4js");
var prettier_1 = require("prettier");
var STRYKER_CONFIG_FILE = 'stryker.conf.js';
var log = log4js_1.getLogger('StrykerConfigWriter');
var StrykerConfigWriter = /** @class */ (function () {
    function StrykerConfigWriter(out, selectedTestRunner, selectedTestFramework, selectedReporters, additionalPiecesOfConfig) {
        this.out = out;
        this.selectedTestFramework = selectedTestFramework;
        this.additionalPiecesOfConfig = additionalPiecesOfConfig;
        this.configObject = {
            files: [
                { pattern: 'src/**/*.js', mutated: true, included: false },
                'test/**/*.js'
            ],
            testRunner: selectedTestRunner ? selectedTestRunner.name : '',
            reporter: selectedReporters.map(function (rep) { return rep.name; })
        };
    }
    StrykerConfigWriter.guardForExistingConfig = function () {
        if (fs.existsSync(STRYKER_CONFIG_FILE)) {
            var msg = 'Stryker config file "stryker.conf.js" already exists in the current directory. Please remove it and try again.';
            log.error(msg);
            throw new Error(msg);
        }
    };
    /**
    * Create stryker.conf.js based on the chosen framework and test runner
    * @function
    */
    StrykerConfigWriter.prototype.write = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.configureTestFramework();
                _.assign.apply(_, [this.configObject].concat(this.additionalPiecesOfConfig));
                return [2 /*return*/, this.writeStrykerConfig(this.configObject)];
            });
        });
    };
    StrykerConfigWriter.prototype.configureTestFramework = function () {
        if (this.selectedTestFramework) {
            this.configObject.testFramework = this.selectedTestFramework.name;
            this.configObject.coverageAnalysis = 'perTest';
        }
        else {
            this.configObject.coverageAnalysis = 'all';
        }
    };
    StrykerConfigWriter.prototype.writeStrykerConfig = function (configObject) {
        this.out('Writing stryker.conf.js...');
        return fs.writeFile(STRYKER_CONFIG_FILE, this.wrapInModule());
    };
    StrykerConfigWriter.prototype.wrapInModule = function () {
        return prettier_1.format("\n      module.exports = function(config){\n        config.set(\n          " + JSON.stringify(this.configObject, null, 2) + "\n        );\n      }");
    };
    return StrykerConfigWriter;
}());
exports.default = StrykerConfigWriter;
//# sourceMappingURL=StrykerConfigWriter.js.map