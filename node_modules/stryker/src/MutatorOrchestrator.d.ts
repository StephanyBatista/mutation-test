import Mutant from './Mutant';
import StrictReporter from './reporters/StrictReporter';
/**
 * Class capable of finding spots to mutate in files.
 */
export default class MutatorOrchestrator {
    private reporter;
    private mutators;
    private sourceFiles;
    /**
     * @param reporter - The reporter to report read input files to
     */
    constructor(reporter: StrictReporter);
    /**
     * Mutates source files. Mutated code is not writen to disk.
     * @function
     * @param sourceFiles - The list of files which should be mutated.
     * @returns {Mutant[]} The generated Mutants.
     */
    generateMutants(sourceFiles: string[]): Mutant[];
    private reportFileRead(path, content);
    private reportAllFilesRead();
    private registerDefaultMutators();
    /**
     * Finds all mutants for a given set of nodes.
     * @function
     * @param {String} sourceFile - The name source file.
     * @param {String} originalCode - The original content of the file which has not been mutated.
     * @param {Object} ast - The original abstract syntax tree which is used for reference when generating code.
     * @param {AbstractSyntaxTreeNode[]} nodes - The nodes which could be used by mutations to generate mutants.
     * @returns {Mutant[]} All possible Mutants for the given set of nodes.
     */
    private findMutants(sourceFile, originalCode, ast, nodes);
}
